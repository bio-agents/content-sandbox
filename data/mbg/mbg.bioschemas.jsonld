{
  "@context": {
    "bioagents": "https://bio.agents/ontology/",
    "bsc": "http://bioschemas.org/",
    "bsct": "http://bioschemas.org/types/",
    "dct": "http://purl.org/dc/terms/",
    "edam": "http://edamontology.org/",
    "owl": "http://www.w3.org/2002/07/owl#",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "sc": "http://schema.org/",
    "xsd": "http://www.w3.org/2001/XMLSchema#"
  },
  "@graph": [
    {
      "@id": "https://doi.org/10.1101/2020.09.18.303156",
      "@type": "sc:CreativeWork"
    },
    {
      "@id": "https://bio.agents/mbg",
      "@type": "sc:SoftwareApplication",
      "dct:conformsTo": "https://bioschemas.org/profiles/ComputationalAgent/0.6-DRAFT",
      "sc:additionalType": [
        "Command-line agent",
        "Library"
      ],
      "sc:applicationSubCategory": [
        {
          "@id": "edam:topic_3168"
        },
        {
          "@id": "edam:topic_0196"
        }
      ],
      "sc:citation": {
        "@id": "https://doi.org/10.1101/2020.09.18.303156"
      },
      "sc:description": "Minimizer-based Sparse de Bruijn Graph Construction.\n\nMinimizer based sparse de Bruijn Graph constructor. Homopolymer compress input sequences, pick syncmers from hpc-compressed sequences, connect syncmers with an edge if they are adjacent in a read, unitigify. Suggested input is PacBio HiFi/CCS reads. May or may not work with Illumina reads. Algorithmic details: https://www.biorxiv.org/content/10.1101/2020.09.18.303156v1.",
      "sc:featureList": [
        {
          "@id": "edam:operation_0524"
        },
        {
          "@id": "edam:operation_3472"
        },
        {
          "@id": "edam:operation_3216"
        }
      ],
      "sc:license": "MIT",
      "sc:name": "MBG",
      "sc:url": "https://anaconda.org/bioconda/mbg"
    }
  ]
}