{
    "additionDate": "2021-01-18T08:01:17Z",
    "bioagentsCURIE": "bioagents:apollo-seq",
    "bioagentsID": "apollo-seq",
    "confidence_flag": "agent",
    "credit": [
        {
            "email": "can.firtina@inf.ethz.ch",
            "typeEntity": "Person"
        }
    ],
    "description": "Apollo is an assembly polishing algorithm that attempts to correct the errors in an assembly. It can take multiple set of reads in a single run and polish the assemblies of genomes of any size.",
    "editPermission": {
        "type": "private"
    },
    "function": [
        {
            "operation": [
                {
                    "term": "Read mapping",
                    "uri": "http://edamontology.org/operation_3198"
                },
                {
                    "term": "Sequence assembly",
                    "uri": "http://edamontology.org/operation_0310"
                },
                {
                    "term": "Sequence merging",
                    "uri": "http://edamontology.org/operation_0232"
                },
                {
                    "term": "Sorting",
                    "uri": "http://edamontology.org/operation_3802"
                },
                {
                    "term": "Splitting",
                    "uri": "http://edamontology.org/operation_3359"
                }
            ]
        }
    ],
    "homepage": "https://github.com/CMU-SAFARI/Apollo",
    "language": [
        "C++"
    ],
    "lastUpdate": "2021-01-24T18:54:01Z",
    "license": "GPL-3.0",
    "name": "Apollo",
    "owner": "Kigaard",
    "publication": [
        {
            "doi": "10.1093/BIOINFORMATICS/BTAA179",
            "metadata": {
                "abstract": "Â© 2020 The Author(s) 2020. Published by Oxford University Press. All rights reserved. For permissions, please e-mail: journals.permissions@oup.com.Motivation: Third-generation sequencing technologies can sequence long reads that contain as many as 2 million base pairs. These long reads are used to construct an assembly (i.e. the subject's genome), which is further used in downstream genome analysis. Unfortunately, third-generation sequencing technologies have high sequencing error rates and a large proportion of base pairs in these long reads is incorrectly identified. These errors propagate to the assembly and affect the accuracy of genome analysis. Assembly polishing algorithms minimize such error propagation by polishing or fixing errors in the assembly by using information from alignments between reads and the assembly (i.e. read-to-assembly alignment information). However, current assembly polishing algorithms can only polish an assembly using reads from either a certain sequencing technology or a small assembly. Such technology-dependency and assembly-size dependency require researchers to (i) run multiple polishing algorithms and (ii) use small chunks of a large genome to use all available readsets and polish large genomes, respectively. Results: We introduce Apollo, a universal assembly polishing algorithm that scales well to polish an assembly of any size (i.e. both large and small genomes) using reads from all sequencing technologies (i.e. second- and third-generation). Our goal is to provide a single algorithm that uses read sets from all available sequencing technologies to improve the accuracy of assembly polishing and that can polish large genomes. Apollo (i) models an assembly as a profile hidden Markov model (pHMM), (ii) uses read-to-assembly alignment to train the pHMM with the Forward-Backward algorithm and (iii) decodes the trained model with the Viterbi algorithm to produce a polished assembly. Our experiments with real readsets demonstrate that Apollo is the only algorithm that (i) uses reads from any sequencing technology within a single run and (ii) scales well to polish large assemblies without splitting the assembly into multiple parts.",
                "authors": [
                    {
                        "name": "Alkan C."
                    },
                    {
                        "name": "Alser M."
                    },
                    {
                        "name": "Cicek A.E."
                    },
                    {
                        "name": "Firtina C."
                    },
                    {
                        "name": "Kim J.S."
                    },
                    {
                        "name": "Mutlu O."
                    },
                    {
                        "name": "Senol Cali D."
                    }
                ],
                "citationCount": 3,
                "date": "2020-03-31T00:00:00Z",
                "journal": "Bioinformatics",
                "title": "Apollo: A sequencing-technology-independent, scalable and accurate assembly polishing algorithm"
            },
            "pmid": "32167530"
        }
    ],
    "agentType": [
        "Command-line agent"
    ],
    "topic": [
        {
            "term": "Mapping",
            "uri": "http://edamontology.org/topic_0102"
        },
        {
            "term": "Sequence assembly",
            "uri": "http://edamontology.org/topic_0196"
        },
        {
            "term": "Sequencing",
            "uri": "http://edamontology.org/topic_3168"
        }
    ]
}
