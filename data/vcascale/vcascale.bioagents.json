{
    "accessibility": "Open access",
    "additionDate": "2022-01-21T00:30:21.015496Z",
    "bioagentsCURIE": "bioagents:vcascale",
    "bioagentsID": "vcascale",
    "confidence_flag": "agent",
    "cost": "Free of charge",
    "credit": [
        {
            "email": "t.ahmad@tudelft.nl",
            "name": "Tanveer Ahmad",
            "orcidid": "https://orcid.org/0000-0003-0519-2315",
            "typeEntity": "Person"
        },
        {
            "name": "H Peter Hofstee",
            "orcidid": "https://orcid.org/0000-0001-9649-7338"
        },
        {
            "name": "Zaid Al Ars",
            "orcidid": "https://orcid.org/0000-0001-7670-8572"
        }
    ],
    "description": "Variant Calling at Scale is a scalable, parallel and efficient implementation of next generation sequencing data pre-processing and variant calling workflows. Our design tightly integrates most pre-processing workflow stages, using Spark built-in functions to sort reads by coordinates, and mark duplicates efficiently. A cluster scaled DeepVariant for both CPU-only and CPU+GPU clusters is also integrated in this workflow.",
    "editPermission": {
        "type": "private"
    },
    "function": [
        {
            "operation": [
                {
                    "term": "Genome indexing",
                    "uri": "http://edamontology.org/operation_3211"
                },
                {
                    "term": "Sorting",
                    "uri": "http://edamontology.org/operation_3802"
                },
                {
                    "term": "Variant calling",
                    "uri": "http://edamontology.org/operation_3227"
                }
            ]
        }
    ],
    "homepage": "https://github.com/abs-tudelft/variant-calling-at-scale",
    "language": [
        "Python",
        "Shell"
    ],
    "lastUpdate": "2022-01-21T00:30:21.017975Z",
    "license": "Apache-2.0",
    "name": "VCaScale",
    "operatingSystem": [
        "Linux",
        "Mac",
        "Windows"
    ],
    "owner": "Jennifer",
    "publication": [
        {
            "doi": "10.1093/GIGASCIENCE/GIAB057",
            "metadata": {
                "abstract": "Â© 2021 The Author(s) 2021. Published by Oxford University Press GigaScience.Background: Recently many new deep learning-based variant-calling methods like DeepVariant have emerged as more accurate compared with conventional variant-calling algorithms such as GATK HaplotypeCaller, Sterlka2, and Freebayes albeit at higher computational costs. Therefore, there is a need for more scalable and higher performance workflows of these deep learning methods. Almost all existing cluster-scaled variant-calling workflows that use Apache Spark/Hadoop as big data frameworks loosely integrate existing single-node pre-processing and variant-calling applications. Using Apache Spark just for distributing/scheduling data among loosely coupled applications or using I/O-based storage for storing the output of intermediate applications does not exploit the full benefit of Apache Spark in-memory processing. To achieve this, we propose a native Spark-based workflow that uses Python and Apache Arrow to enable efficient transfer of data between different workflow stages. This benefits from the ease of programmability of Python and the high efficiency of Arrow's columnar in-memory data transformations. Results: Here we present a scalable, parallel, and efficient implementation of next-generation sequencing data pre-processing and variant-calling workflows. Our design tightly integrates most pre-processing workflow stages, using Spark built-in functions to sort reads by coordinates and mark duplicates efficiently. Our approach outperforms state-of-The-Art implementations by >2 times for the pre-processing stages, creating a scalable and high-performance solution for DeepVariant for both CPU-only and CPU + GPU clusters. Conclusions: We show the feasibility and easy scalability of our approach to achieve high performance and efficient resource utilization for variant-calling analysis on high-performance computing clusters using the standardized Apache Arrow data representations. All codes, scripts, and configurations used to run our implementations are publicly available and open sourced; see https://github.com/abs-Tudelft/variant-calling-At-scale.",
                "authors": [
                    {
                        "name": "Ahmad T."
                    },
                    {
                        "name": "Al Ars Z."
                    },
                    {
                        "name": "Hofstee H.P."
                    }
                ],
                "date": "2021-09-01T00:00:00Z",
                "journal": "GigaScience",
                "title": "VC@Scale: Scalable and high-performance variant calling on cluster environments"
            },
            "pmcid": "PMC8424057",
            "pmid": "34494101"
        }
    ],
    "agentType": [
        "Command-line agent"
    ],
    "topic": [
        {
            "term": "Computer science",
            "uri": "http://edamontology.org/topic_3316"
        },
        {
            "term": "Whole genome sequencing",
            "uri": "http://edamontology.org/topic_3673"
        },
        {
            "term": "Workflows",
            "uri": "http://edamontology.org/topic_0769"
        }
    ]
}
