{
    "additionDate": "2021-11-29T08:15:17.058783Z",
    "bioagentsCURIE": "bioagents:pygenn",
    "bioagentsID": "pygenn",
    "confidence_flag": "agent",
    "credit": [
        {
            "email": "j.c.knight@sussex.ac.uk",
            "name": "James C. Knight",
            "typeEntity": "Person"
        }
    ],
    "description": "PyGeNN is a Python library for GPU-enhanced neural networks. PyGeNN is a Python package which exposes all of GeNN's functionality to Python with minimal overhead. This provides an alternative, arguably more user-friendly, way of using GeNN and allows modelers to use GeNN within the growing Python-based machine learning and computational neuroscience ecosystems.",
    "editPermission": {
        "type": "private"
    },
    "function": [
        {
            "operation": [
                {
                    "term": "Modelling and simulation",
                    "uri": "http://edamontology.org/operation_2426"
                },
                {
                    "term": "Network analysis",
                    "uri": "http://edamontology.org/operation_3927"
                }
            ]
        }
    ],
    "homepage": "https://github.com/BrainsOnBoard/pygenn_paper",
    "language": [
        "C++",
        "Python"
    ],
    "lastUpdate": "2021-11-29T08:15:17.061428Z",
    "link": [
        {
            "type": [
                "Issue tracker"
            ],
            "url": "https://github.com/BrainsOnBoard/pygenn_paper/issues"
        }
    ],
    "name": "PyGeNN",
    "owner": "Kigaard",
    "publication": [
        {
            "doi": "10.3389/FNINF.2021.659005",
            "metadata": {
                "abstract": "© Copyright © 2021 Knight, Komissarov and Nowotny.More than half of the Top 10 supercomputing sites worldwide use GPU accelerators and they are becoming ubiquitous in workstations and edge computing devices. GeNN is a C++ library for generating efficient spiking neural network simulation code for GPUs. However, until now, the full flexibility of GeNN could only be harnessed by writing model descriptions and simulation code in C++. Here we present PyGeNN, a Python package which exposes all of GeNN's functionality to Python with minimal overhead. This provides an alternative, arguably more user-friendly, way of using GeNN and allows modelers to use GeNN within the growing Python-based machine learning and computational neuroscience ecosystems. In addition, we demonstrate that, in both Python and C++ GeNN simulations, the overheads of recording spiking data can strongly affect runtimes and show how a new spike recording system can reduce these overheads by up to 10×. Using the new recording system, we demonstrate that by using PyGeNN on a modern GPU, we can simulate a full-scale model of a cortical column faster even than real-time neuromorphic systems. Finally, we show that long simulations of a smaller model with complex stimuli and a custom three-factor learning rule defined in PyGeNN can be simulated almost two orders of magnitude faster than real-time.",
                "authors": [
                    {
                        "name": "Knight J.C."
                    },
                    {
                        "name": "Komissarov A."
                    },
                    {
                        "name": "Nowotny T."
                    }
                ],
                "date": "2021-04-22T00:00:00Z",
                "journal": "Frontiers in Neuroinformatics",
                "title": "PyGeNN: A Python Library for GPU-Enhanced Neural Networks"
            },
            "pmcid": "PMC8100330",
            "pmid": "33967731"
        }
    ],
    "agentType": [
        "Library",
        "Suite"
    ],
    "topic": [
        {
            "term": "Machine learning",
            "uri": "http://edamontology.org/topic_3474"
        },
        {
            "term": "Neurobiology",
            "uri": "http://edamontology.org/topic_3304"
        },
        {
            "term": "Simulation experiment",
            "uri": "http://edamontology.org/topic_3524"
        }
    ]
}
