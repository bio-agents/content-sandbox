{
    "additionDate": "2020-01-09T17:30:07Z",
    "bioagentsCURIE": "bioagents:doepipeline",
    "bioagentsID": "doepipeline",
    "confidence_flag": "agent",
    "credit": [
        {
            "email": "johan.trygg@umu.se",
            "name": "Johan Trygg",
            "orcidid": "https://orcid.org/0000-0003-3799-6094",
            "typeEntity": "Person"
        }
    ],
    "description": "A python package for optimizing processing pipelines using statistical design of experiments (DoE).\nA systematic approach to optimizing multi-level and multi-step data processing workflows.\nOptimize your data processing pipelines with doepipeline. The optimization strategy implemented in doepipeline is based on methods from statistical Design of Experiments (DoE). Use it to optimize quantitative and/or qualitative factors of simple (single agent) or complex (multiple agent) pipelines",
    "editPermission": {
        "type": "public"
    },
    "function": [
        {
            "operation": [
                {
                    "term": "De-novo assembly",
                    "uri": "http://edamontology.org/operation_0524"
                },
                {
                    "term": "Phasing",
                    "uri": "http://edamontology.org/operation_3454"
                },
                {
                    "term": "Scaffolding",
                    "uri": "http://edamontology.org/operation_3216"
                },
                {
                    "term": "Sequence trimming",
                    "uri": "http://edamontology.org/operation_3192"
                },
                {
                    "term": "Variant calling",
                    "uri": "http://edamontology.org/operation_3227"
                }
            ]
        }
    ],
    "homepage": "https://github.com/clicumu/doepipeline",
    "language": [
        "Python"
    ],
    "lastUpdate": "2020-12-22T10:18:31Z",
    "license": "MIT",
    "link": [
        {
            "type": [
                "Issue tracker"
            ],
            "url": "https://github.com/clicumu/doepipeline/issues"
        },
        {
            "type": [
                "Repository"
            ],
            "url": "https://pypi.org/project/doepipeline/"
        }
    ],
    "name": "doepipeline",
    "owner": "Pub2Agents",
    "publication": [
        {
            "doi": "10.1186/S12859-019-3091-Z",
            "metadata": {
                "abstract": "Â© 2019 The Author(s).Background: Selecting the proper parameter settings for bioinformatic software agents is challenging. Not only will each parameter have an individual effect on the outcome, but there are also potential interaction effects between parameters. Both of these effects may be difficult to predict. To make the situation even more complex, multiple agents may be run in a sequential pipeline where the final output depends on the parameter configuration for each agent in the pipeline. Because of the complexity and difficulty of predicting outcomes, in practice parameters are often left at default settings or set based on personal or peer experience obtained in a trial and error fashion. To allow for the reliable and efficient selection of parameters for bioinformatic pipelines, a systematic approach is needed. Results: We present doepipeline, a novel approach to optimizing bioinformatic software parameters, based on core concepts of the Design of Experiments methodology and recent advances in subset designs. Optimal parameter settings are first approximated in a screening phase using a subset design that efficiently spans the entire search space, then optimized in the subsequent phase using response surface designs and OLS modeling. Doepipeline was used to optimize parameters in four use cases; 1) de-novo assembly, 2) scaffolding of a fragmented genome assembly, 3) k-mer taxonomic classification of Oxford Nanopore Technologies MinION reads, and 4) genetic variant calling. In all four cases, doepipeline found parameter settings that produced a better outcome with respect to the characteristic measured when compared to using default values. Our approach is implemented and available in the Python package doepipeline. Conclusions: Our proposed methodology provides a systematic and robust framework for optimizing software parameter settings, in contrast to labor- and time-intensive manual parameter tweaking. Implementation in doepipeline makes our methodology accessible and user-friendly, and allows for automatic optimization of agents in a wide range of cases. The source code of doepipeline is available at https://github.com/clicumu/doepipeline and it can be installed through conda-forge.",
                "authors": [
                    {
                        "name": "Sjodin A."
                    },
                    {
                        "name": "Sjogren R."
                    },
                    {
                        "name": "Sundell D."
                    },
                    {
                        "name": "Svensson D."
                    },
                    {
                        "name": "Trygg J."
                    }
                ],
                "date": "2019-10-15T00:00:00Z",
                "journal": "BMC Bioinformatics",
                "title": "Doepipeline: A systematic approach to optimizing multi-level and multi-step data processing workflows"
            },
            "pmcid": "PMC6794737",
            "pmid": "31615395"
        }
    ],
    "agentType": [
        "Library"
    ],
    "topic": [
        {
            "term": "Experimental design and studies",
            "uri": "http://edamontology.org/topic_3678"
        },
        {
            "term": "Sequence assembly",
            "uri": "http://edamontology.org/topic_0196"
        },
        {
            "term": "Workflows",
            "uri": "http://edamontology.org/topic_0769"
        }
    ],
    "validated": 1
}
