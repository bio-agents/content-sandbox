{
  "@context": {
    "bioagents": "https://bio.agents/ontology/",
    "bsc": "http://bioschemas.org/",
    "bsct": "http://bioschemas.org/types/",
    "dct": "http://purl.org/dc/terms/",
    "edam": "http://edamontology.org/",
    "owl": "http://www.w3.org/2002/07/owl#",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "sc": "http://schema.org/",
    "xsd": "http://www.w3.org/2001/XMLSchema#"
  },
  "@graph": [
    {
      "@id": "https://doi.org/10.1007/978-3-030-45237-7_26",
      "@type": "sc:CreativeWork"
    },
    {
      "@id": "https://bio.agents/gacal",
      "@type": "sc:SoftwareApplication",
      "dct:conformsTo": "https://bioschemas.org/profiles/ComputationalAgent/0.6-DRAFT",
      "sc:additionalType": "Command-line agent",
      "sc:citation": [
        {
          "@id": "https://doi.org/10.1007/978-3-030-45237-7_26"
        },
        "pmcid:PMC7480696"
      ],
      "sc:description": "Conjecture-Based Verification.\n\nGACAL verifies C programs by searching over the space of possible invariants, using traces of the input program to identify potential invariants. GACAL uses the ACL2s theorem prover to verify these potential invariants, using an interface provided by ACL2s for connecting with external agents. GACAL iteratively searches for and proves invariants of increasing complexity until the program is verified",
      "sc:featureList": [
        {
          "@id": "edam:operation_2421"
        },
        {
          "@id": "edam:operation_0545"
        }
      ],
      "sc:name": "GACAL",
      "sc:url": "https://gitlab.com/acl2s/conjecture-generation/gacal"
    }
  ]
}