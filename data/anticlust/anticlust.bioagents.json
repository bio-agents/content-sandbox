{
    "additionDate": "2021-01-18T09:36:45Z",
    "bioagentsCURIE": "bioagents:anticlust",
    "bioagentsID": "anticlust",
    "confidence_flag": "agent",
    "description": "Anticlustering partitions a pool of elements into subsets (i.e., anticlusters) in such a way that the subsets are as similar as possible. This is accomplished by maximizing instead of minimizing a clustering objective function, such as the intra-cluster variance (used in k-means clustering) or the sum of pairwise distances within clusters. Thus, anticlustering creates similar sets of elements by maximizing heterogeneity within anticlusters.",
    "editPermission": {
        "type": "private"
    },
    "function": [
        {
            "operation": [
                {
                    "term": "Aggregation",
                    "uri": "http://edamontology.org/operation_3436"
                },
                {
                    "term": "Clustering",
                    "uri": "http://edamontology.org/operation_3432"
                },
                {
                    "term": "Editing",
                    "uri": "http://edamontology.org/operation_3096"
                },
                {
                    "term": "Splitting",
                    "uri": "http://edamontology.org/operation_3359"
                }
            ]
        }
    ],
    "homepage": "https://m-py.github.io/anticlust/",
    "language": [
        "C",
        "R"
    ],
    "lastUpdate": "2021-01-23T16:29:53Z",
    "license": "MIT",
    "link": [
        {
            "type": [
                "Issue tracker"
            ],
            "url": "https://github.com/m-Py/anticlust/issues"
        },
        {
            "type": [
                "Repository"
            ],
            "url": "https://cran.r-project.org/package=anticlust"
        },
        {
            "type": [
                "Repository"
            ],
            "url": "https://github.com/m-Py/anticlust"
        }
    ],
    "name": "anticlust",
    "owner": "Kigaard",
    "publication": [
        {
            "doi": "10.1037/MET0000301",
            "metadata": {
                "abstract": "Â© 2020 American Psychological AssociationNumerous applications in psychological research require that a pool of elements is partitioned into multiple parts. While many applications seek groups that are well-separated, that is, dissimilar from each other, others require the different groups to be as similar as possible. Examples include the assignment of students to parallel courses, assembling stimulus sets in experimental psychology, splitting achievement tests into parts of equal difficulty, and dividing a data set for cross-validation. We present anticlust, an easy-to-use and free software package for solving these problems fast and in an automated manner. The package anticlust is an open source extension to the R programming language and implements the methodology of anticlustering. Anticlustering divides elements into similar parts, ensuring similarity between groups by enforcing heterogeneity within groups. Thus, anticlustering is the direct reversal of cluster analysis that aims to maximize homogeneity within groups and dissimilarity between groups. Our package anticlust implements 2 anticlustering criteria, reversing the clustering methods k-means and cluster editing, respectively. In a simulation study, we show that anticlustering returns excellent results and outperforms alternative approaches like random assignment and matching. In 3 example applications, we illustrate how to apply anticlust on real data sets. We demonstrate how to assign experimental stimuli to equivalent sets based on norming data, how to divide a large data set for cross-validation, and how to split a test into parts of equal item difficulty and discrimination. (PsycInfo Database Record (c) 2021 APA, all rights reserved) Translational Abstract: Numerous applications in psychological research require that a pool of elements is partitioned into multiple parts, while ensuring that the different parts are as similar as possible. Examples include the assignment of students to parallel courses, assembling stimulus sets in experimental psychology, splitting achievement tests into parts of equal difficulty, and dividing a data set for cross validation. To solve such problems, researchers usually rely on strategies such as manual assigment, random assignment, or matching. As an improvement over these approaches, we present anticlust, an easy-to-use and free software package that quickly and effectively partitions elements into groups that are as similar as possible. Anticlust is an open source package written in the R programming language, implementing many established and new anticlustering methods. Anticlustering assembles groups in such a way that within-group heterogenity is high and between-group similarity is high. Thus, anticlustering reverses the logic of cluster analysis that strives to maximize homogeneity within groups and dissimilarity between groups. Tests on simulated and real data show that our anticlustering algorithms return excellent results that outperform previous approaches like manual assignment, random assignment, and matching. In three example applications, we demonstrate how to use anticlust to assign experimental stimuli to equivalent sets based on norming data, how to divide a large data set for cross validation, and how to split a test into parts of equal item difficulty and discrimination. (PsycInfo Database Record (c) 2021 APA, all rights reserved)",
                "authors": [
                    {
                        "name": "Klau G.W."
                    },
                    {
                        "name": "Papenberg M."
                    }
                ],
                "date": "2021-01-01T00:00:00Z",
                "journal": "Psychological Methods",
                "title": "Using anticlustering to partition data sets into equivalent parts."
            },
            "pmid": "32567870"
        }
    ],
    "agentType": [
        "Library"
    ],
    "topic": [
        {
            "term": "Machine learning",
            "uri": "http://edamontology.org/topic_3474"
        },
        {
            "term": "Sequence assembly",
            "uri": "http://edamontology.org/topic_0196"
        },
        {
            "term": "Software engineering",
            "uri": "http://edamontology.org/topic_3372"
        }
    ],
    "validated": 1
}
