{
    "additionDate": "2021-01-18T10:56:07Z",
    "bioagentsCURIE": "bioagents:endicheck",
    "bioagentsID": "endicheck",
    "confidence_flag": "agent",
    "credit": [
        {
            "email": "parizek@d3s.mff.cuni.cz",
            "name": "Pavel Parízek",
            "typeEntity": "Person"
        }
    ],
    "description": "Dynamic Analysis for Detecting Endianness Bugs.\n\nEndicheck is a Valgrind agent to help you detect missing byte-swaps in your program.\n\nIt is recommended to use --prefix to install into other-than-default location, since you typically do not want to replace your system's installation of Valgrind. Endicheck still contains all the original Valgrind agents, like MemCheck, but it might not contain all the latest updates or distribution patches.",
    "editPermission": {
        "type": "private"
    },
    "function": [
        {
            "operation": [
                {
                    "term": "Essential dynamics",
                    "uri": "http://edamontology.org/operation_3891"
                }
            ]
        }
    ],
    "homepage": "http://github.com/rkapl/endicheck",
    "language": [
        "C"
    ],
    "lastUpdate": "2021-03-07T10:59:38Z",
    "name": "Endicheck",
    "owner": "zsmag19",
    "publication": [
        {
            "doi": "10.1007/978-3-030-45237-7_15",
            "metadata": {
                "abstract": "© 2020, The Author(s).Computers store numbers in two mutually incompatible ways: little-endian or big-endian. They differ in the order of bytes within representation of numbers. This ordering is called endianness. When two computer systems, programs or devices communicate, they must agree on which endianness to use, in order to avoid misinterpretation of numeric data values. We present Endicheck, a dynamic analysis agent for detecting endianness bugs, which is based on the popular Valgrind framework. It helps developers to find those code locations in their program where they forgot to swap bytes properly. Endicheck requires less source code annotations than existing agents, such as Sparse used by Linux kernel developers, and it can also detect potential bugs that would only manifest if the given program was run on computer with an opposite endianness. Our approach has been evaluated and validated on the Radeon SI Linux OpenGL driver, which is known to contain endianness-related bugs, and on several open-source programs. Results of experiments show that Endicheck can successfully identify many endianness-related bugs and provide useful diagnostic messages together with the source code locations of respective bugs.",
                "authors": [
                    {
                        "name": "Kapl R."
                    },
                    {
                        "name": "Parizek P."
                    }
                ],
                "date": "2020-01-01T00:00:00Z",
                "journal": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
                "title": "Endicheck: Dynamic Analysis for Detecting Endianness Bugs"
            },
            "pmcid": "PMC7480700"
        }
    ],
    "topic": [
        {
            "term": "Imaging",
            "uri": "http://edamontology.org/topic_3382"
        }
    ]
}
